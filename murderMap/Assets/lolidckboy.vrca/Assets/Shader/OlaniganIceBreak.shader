Shader "Olanigan/IceBreak" {
	Properties {
		_snow ("snow", 2D) = "white" {}
		_Color ("Color", Vector) = (0.5019608,0.5019608,0.5019608,1)
		_Metallic ("Metallic", Range(0, 1)) = 0.6030321
		_Gloss ("Gloss", Range(0, 1)) = 0.3252537
		_BumpMap ("Normal Map I", 2D) = "bump" {}
		_NormalMapII ("Normal Map II", 2D) = "bump" {}
		_snow_slider ("snow_slider", Range(0, 10)) = 7.705339
		_Freezeeffectnormal ("Freeze effect (normal)", Range(0, 10)) = 4.77537
		[MaterialToggle] _LocalGlobal ("Local/Global", Float) = 0
		_Transparency ("Transparency", Range(-1, 1)) = 0
		_Ice_fresnel ("Ice_fresnel", Range(0, 3)) = 0
		[HideInInspector] _Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		GrabPass {
		}
		Pass {
			Name "FORWARD"
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			GpuProgramID 59535
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat15;
					float u_xlat24;
					float u_xlat25;
					vec2 u_xlat26;
					float u_xlat27;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					float u_xlat39;
					float u_xlat16_39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat16_40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat3.z = sqrt(u_xlat38);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat38 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat38 = min(u_xlat38, 1.0);
					    u_xlat38 = (-u_xlat38) + 1.0;
					    u_xlat4.z = sqrt(u_xlat38);
					    u_xlat38 = u_xlat12.y * unity_WorldToObject[1].y;
					    u_xlat38 = unity_WorldToObject[0].y * u_xlat12.x + u_xlat38;
					    u_xlat38 = unity_WorldToObject[2].y * u_xlat12.z + u_xlat38;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat38);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat38;
					    u_xlat38 = max(_snow_slider, 0.0);
					    u_xlat38 = min(u_xlat38, 1.20000005);
					    u_xlat38 = u_xlat38 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat39 = max(u_xlat3.y, 0.0);
					    u_xlat39 = min(u_xlat39, 0.800000012);
					    u_xlat39 = u_xlat39 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat38 * u_xlat0.x + u_xlat39;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat3.zzz * u_xlat12.xyz + u_xlat3.xyw;
					    u_xlat38 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat38);
					    u_xlat38 = dot((-u_xlat2.xyz), u_xlat12.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat3.xyz = u_xlat12.xyz * (-vec3(u_xlat38)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat12.xyz, u_xlat2.xyz);
					    u_xlat14 = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * _Ice_fresnel;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat26.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat26.xy = vs_TEXCOORD0.xy * vec2(u_xlat14) + u_xlat26.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat26.xy);
					    u_xlat26.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat26.x = inversesqrt(u_xlat26.x);
					    u_xlat5.xyz = u_xlat26.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + u_xlat5.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat37 = (-_Gloss) + 0.699999988;
					    u_xlat37 = u_xlat0.x * u_xlat37 + _Gloss;
					    u_xlat26.x = (-u_xlat37) + 1.0;
					    u_xlat38 = u_xlat26.x * u_xlat26.x;
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat39 = (-u_xlat26.x) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat26.x * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat16_40 = u_xlat10_6.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat16_40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        //ENDIF
					        }
					        u_xlat10_3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat39);
					        u_xlat16_39 = u_xlat10_3.w + -1.0;
					        u_xlat39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;
					        u_xlat39 = log2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat10_6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    //ENDIF
					    }
					    u_xlat3.x = dot(u_xlat12.xyz, u_xlat5.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat15 = min(u_xlat3.x, 1.0);
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat39 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat6.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat39) * 0.959999979 + 0.959999979;
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat1.xyz);
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat24 = (-u_xlat26.x) * u_xlat26.x + 1.0;
					    u_xlat36 = abs(u_xlat2.x) * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat15 * u_xlat24 + u_xlat38;
					    u_xlat24 = u_xlat24 * abs(u_xlat2.x);
					    u_xlat24 = u_xlat15 * u_xlat36 + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 0.5 / u_xlat24;
					    u_xlat36 = u_xlat38 * u_xlat38;
					    u_xlat1.x = u_xlat12.x * u_xlat36 + (-u_xlat12.x);
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat36 = u_xlat36 * 0.318309873;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat36 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * u_xlat24;
					    u_xlat12.x = u_xlat15 * u_xlat12.x;
					    u_xlat12.x = u_xlat12.x * 3.14159274;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat24 = u_xlat38 * u_xlat38 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat36 * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat12.x = (-u_xlat27) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat12.xxx + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat37;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.x = -abs(u_xlat2.x) + 1.0;
					    u_xlat36 = u_xlat12.x * u_xlat12.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat9.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat5.xyz = u_xlat12.xxx * u_xlat9.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xyz;
					    u_xlat0.xzw = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xzw;
					    u_xlat1.x = u_xlat27 + u_xlat27;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat13 = (-u_xlat3.x) + 1.0;
					    u_xlat25 = u_xlat13 * u_xlat13;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13 = u_xlat13 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat26.x + -0.5;
					    u_xlat13 = u_xlat1.x * u_xlat13 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat13;
					    u_xlat12.x = u_xlat3.x * u_xlat12.x;
					    u_xlat1.xyz = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat0.xzw;
					    u_xlat36 = (-u_xlat14) + 1.0;
					    u_xlat36 = _Transparency * u_xlat36 + u_xlat14;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _snow;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					vec4 u_xlat10_9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					float u_xlat16_13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat15;
					float u_xlat19;
					float u_xlat26;
					float u_xlat27;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat16_43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati1].xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat3 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat3.z = sqrt(u_xlat41);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat4 = texture(_NormalMapII, u_xlat4.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat41 = min(u_xlat41, 1.0);
					    u_xlat41 = (-u_xlat41) + 1.0;
					    u_xlat4.z = sqrt(u_xlat41);
					    u_xlat41 = u_xlat13.y * unity_WorldToObject[1].y;
					    u_xlat41 = unity_WorldToObject[0].y * u_xlat13.x + u_xlat41;
					    u_xlat41 = unity_WorldToObject[2].y * u_xlat13.z + u_xlat41;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat41);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat41;
					    u_xlat41 = max(_snow_slider, 0.0);
					    u_xlat41 = min(u_xlat41, 1.20000005);
					    u_xlat41 = u_xlat41 * 0.699999988;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat3.y);
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat42 = max(u_xlat3.y, 0.0);
					    u_xlat42 = min(u_xlat42, 0.800000012);
					    u_xlat42 = u_xlat42 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat41 * u_xlat0.x + u_xlat42;
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD6.xyz;
					    u_xlat3.xyw = u_xlat3.xxx * vs_TEXCOORD5.xyz + u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.zzz * u_xlat13.xyz + u_xlat3.xyw;
					    u_xlat41 = dot(u_xlat13.xyz, u_xlat13.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(u_xlat41);
					    u_xlat13.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat13.x = u_xlat13.x + u_xlat13.x;
					    u_xlat13.xyz = u_xlat3.xyz * (-u_xlat13.xxx) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat2.x, 0.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = log2(u_xlat15);
					    u_xlat15 = u_xlat15 * _Ice_fresnel;
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat28.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat28.xy = vs_TEXCOORD0.xy * vec2(u_xlat15) + u_xlat28.xy;
					    u_xlat10_4 = texture(_GrabTexture, u_xlat28.xy);
					    u_xlat28.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat5.xyz;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat1.xyz = vec3(u_xlat40) * u_xlat1.xyz;
					    u_xlat40 = (-_Gloss) + 0.699999988;
					    u_xlat40 = u_xlat0.x * u_xlat40 + _Gloss;
					    u_xlat28.x = (-u_xlat40) + 1.0;
					    u_xlat41 = u_xlat28.x * u_xlat28.x;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat6.y * 0.25;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat19 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat43 = max(u_xlat43, u_xlat44);
					        u_xlat6.x = min(u_xlat19, u_xlat43);
					        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(u_xlat10_7, u_xlat3);
					        u_xlat7.y = dot(u_xlat10_8, u_xlat3);
					        u_xlat7.z = dot(u_xlat10_6, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat3);
					        u_xlat7.y = dot(unity_SHAg, u_xlat3);
					        u_xlat7.z = dot(unity_SHAb, u_xlat3);
					    //ENDIF
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD9.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = u_xlat13.xyz * vec3(u_xlat42);
					        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat42 = (-u_xlat28.x) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat28.x * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat16_43 = u_xlat10_7.w + -1.0;
					    u_xlat43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;
					    u_xlat43 = log2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.y;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat13.xyz, u_xlat13.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat13.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat13.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        //ENDIF
					        }
					        u_xlat10_9 = textureLod(unity_SpecCube1, u_xlat13.xyz, u_xlat42);
					        u_xlat16_13 = u_xlat10_9.w + -1.0;
					        u_xlat13.x = unity_SpecCube1_HDR.w * u_xlat16_13 + 1.0;
					        u_xlat13.x = log2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.y;
					        u_xlat13.x = exp2(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * unity_SpecCube1_HDR.x;
					        u_xlat13.xyz = u_xlat10_9.xyz * u_xlat13.xxx;
					        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat13.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat13.xyz;
					    //ENDIF
					    }
					    u_xlat13.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat13.x = max(u_xlat13.x, 0.0);
					    u_xlat26 = min(u_xlat13.x, 1.0);
					    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat42 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_5 = texture(_snow, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz + (-_Color.xyz);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * _Color.xyz;
					    u_xlat5.xyz = _Color.xyz * u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.x = (-u_xlat42) * 0.959999979 + 0.959999979;
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
					    u_xlat27 = abs(u_xlat2.x) * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat26 * u_xlat14.x + u_xlat41;
					    u_xlat14.x = u_xlat14.x * abs(u_xlat2.x);
					    u_xlat14.x = u_xlat26 * u_xlat27 + u_xlat14.x;
					    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
					    u_xlat14.x = 0.5 / u_xlat14.x;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat3.x = u_xlat1.x * u_xlat27 + (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.x * u_xlat1.x + 1.0;
					    u_xlat27 = u_xlat27 * 0.318309873;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
					    u_xlat1.x = u_xlat27 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat26 * 3.14159274;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat1.x = u_xlat41 * u_xlat41 + 1.0;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat14.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat3.xyz = vec3(u_xlat26) * _LightColor0.xyz;
					    u_xlat26 = (-u_xlat39) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat9.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat5.xyz;
					    u_xlat0.x = u_xlat0.x + u_xlat40;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat26 = -abs(u_xlat2.x) + 1.0;
					    u_xlat14.x = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.xyz = (-u_xlat5.xyz) + u_xlat0.xxx;
					    u_xlat14.xyz = vec3(u_xlat26) * u_xlat14.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat39 + u_xlat39;
					    u_xlat0.x = u_xlat39 * u_xlat0.x;
					    u_xlat39 = (-u_xlat13.x) + 1.0;
					    u_xlat40 = u_xlat39 * u_xlat39;
					    u_xlat40 = u_xlat40 * u_xlat40;
					    u_xlat39 = u_xlat39 * u_xlat40;
					    u_xlat0.x = u_xlat0.x * u_xlat28.x + -0.5;
					    u_xlat39 = u_xlat0.x * u_xlat39 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat26 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat39;
					    u_xlat0.x = u_xlat13.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat39 = (-u_xlat15) + 1.0;
					    u_xlat39 = _Transparency * u_xlat39 + u_xlat15;
					    u_xlat0.xyz = (-u_xlat10_4.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat10_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD_DELTA"
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One One, One One
			GpuProgramID 75166
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD6.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					int u_xlati13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat4.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat8.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat8.zxy * u_xlat4.yzx;
					    u_xlat8.xyz = u_xlat8.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = u_xlat8.xyz * vec3(u_xlat15);
					    u_xlat7 = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat1.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati13 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati13].zw;
					    vs_TEXCOORD7.xy = u_xlat1.xy * unity_StereoScaleOffset[u_xlati13].xy + u_xlat2.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD6.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					int u_xlati13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat4.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat8.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat8.zxy * u_xlat4.yzx;
					    u_xlat8.xyz = u_xlat8.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = u_xlat8.xyz * vec3(u_xlat15);
					    u_xlat7 = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat1.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati13 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati13].zw;
					    vs_TEXCOORD7.xy = u_xlat1.xy * unity_StereoScaleOffset[u_xlati13].xy + u_xlat2.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD6.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					int u_xlati13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat4.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat8.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat8.zxy * u_xlat4.yzx;
					    u_xlat8.xyz = u_xlat8.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = u_xlat8.xyz * vec3(u_xlat15);
					    u_xlat7 = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat1.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati13 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati13].zw;
					    vs_TEXCOORD7.xy = u_xlat1.xy * unity_StereoScaleOffset[u_xlati13].xy + u_xlat2.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					int u_xlati10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat7.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat7.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat7.xy;
					    u_xlat7.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat7.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat7.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat7.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat7.xyz;
					    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat7.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat7.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat7.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD6.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					int u_xlati13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat4.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat8.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat8.zxy * u_xlat4.yzx;
					    u_xlat8.xyz = u_xlat8.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = u_xlat8.xyz * vec3(u_xlat15);
					    u_xlat7 = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat1.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati13 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati13].zw;
					    vs_TEXCOORD7.xy = u_xlat1.xy * unity_StereoScaleOffset[u_xlati13].xy + u_xlat2.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD6.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					int u_xlati13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat4.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat8.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat8.zxy * u_xlat4.yzx;
					    u_xlat8.xyz = u_xlat8.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = u_xlat8.xyz * vec3(u_xlat15);
					    u_xlat7 = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat1.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati13 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati13].zw;
					    vs_TEXCOORD7.xy = u_xlat1.xy * unity_StereoScaleOffset[u_xlati13].xy + u_xlat2.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD6.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					int u_xlati13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat4.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat8.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat8.zxy * u_xlat4.yzx;
					    u_xlat8.xyz = u_xlat8.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = u_xlat8.xyz * vec3(u_xlat15);
					    u_xlat7 = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat1.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati13 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati13].zw;
					    vs_TEXCOORD7.xy = u_xlat1.xy * unity_StereoScaleOffset[u_xlati13].xy + u_xlat2.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					int u_xlati10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat7.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat7.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat7.xy;
					    u_xlat7.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat7.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat7.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat7.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat7.xyz;
					    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat7.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat7.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat7.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD6.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					int u_xlati13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat4.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat8.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat8.zxy * u_xlat4.yzx;
					    u_xlat8.xyz = u_xlat8.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = u_xlat8.xyz * vec3(u_xlat15);
					    u_xlat7 = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat1.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati13 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati13].zw;
					    vs_TEXCOORD7.xy = u_xlat1.xy * unity_StereoScaleOffset[u_xlati13].xy + u_xlat2.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD6.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD7.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat0.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					int u_xlati10;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat5.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat5.zxy * u_xlat3.yzx;
					    u_xlat5.xyz = u_xlat5.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = u_xlat5.xyz * vec3(u_xlat12);
					    u_xlat5.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4].z;
					    u_xlat5.x = unity_StereoMatrixV[u_xlati0 / 4][u_xlati0 % 4].z * u_xlat1.x + u_xlat5.x;
					    u_xlat5.x = unity_StereoMatrixV[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4].z * u_xlat1.z + u_xlat5.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4].z * u_xlat1.w + u_xlat5.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat2.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat2.w;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD6.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					int u_xlati13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat4.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat8.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat8.zxy * u_xlat4.yzx;
					    u_xlat8.xyz = u_xlat8.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = u_xlat8.xyz * vec3(u_xlat15);
					    u_xlat7 = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat1.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati13 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati13].zw;
					    vs_TEXCOORD7.xy = u_xlat1.xy * unity_StereoScaleOffset[u_xlati13].xy + u_xlat2.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD6.xyz = vec3(u_xlat14) * u_xlat3.xyz;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					int u_xlati13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat4.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    vs_TEXCOORD4.xyz = u_xlat8.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat8.zxy * u_xlat4.yzx;
					    u_xlat8.xyz = u_xlat8.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = u_xlat8.xyz * vec3(u_xlat15);
					    u_xlat7 = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat1.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD7.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati13 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati13].zw;
					    vs_TEXCOORD7.xy = u_xlat1.xy * unity_StereoScaleOffset[u_xlati13].xy + u_xlat2.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.w = u_xlat2.w;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV[2];
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_3_4[38];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_3_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					int u_xlati10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2 / 4][u_xlati2 % 4] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4] * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat7.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat7.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat7.xy;
					    u_xlat7.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat7.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat7.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat7.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat7.xyz;
					    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat7.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat7.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat7.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD6.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati2 + 1) / 4][(u_xlati2 + 1) % 4].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati2 / 4][u_xlati2 % 4].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati2 + 2) / 4][(u_xlati2 + 2) % 4].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati2 + 3) / 4][(u_xlati2 + 3) % 4].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD7.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat3.ww * unity_StereoScaleOffset[u_xlati10].zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati10].xy + u_xlat1.xy;
					    vs_TEXCOORD7.w = u_xlat3.w;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat0.z = sqrt(u_xlat15);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat16 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat16 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat16;
					    u_xlat16 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat16;
					    u_xlat15 = vs_TEXCOORD4.y * u_xlat15 + (-u_xlat16);
					    u_xlat15 = _LocalGlobal * u_xlat15 + u_xlat16;
					    u_xlat15 = u_xlat15 * abs(u_xlat15) + (-u_xlat1.y);
					    u_xlat15 = u_xlat15 * _snow_slider;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = max(u_xlat1.y, 0.0);
					    u_xlat16 = min(u_xlat16, 0.800000012);
					    u_xlat16 = u_xlat16 * _Freezeeffectnormal;
					    u_xlat17 = max(_snow_slider, 0.0);
					    u_xlat17 = min(u_xlat17, 1.20000005);
					    u_xlat17 = u_xlat17 * 0.699999988;
					    u_xlat15 = u_xlat17 * u_xlat15 + u_xlat16;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10 = (-_Gloss) + 0.699999988;
					    u_xlat10 = u_xlat15 * u_xlat10 + _Gloss;
					    u_xlat10 = (-u_xlat10) + 1.0;
					    u_xlat1.x = u_xlat10 * u_xlat10;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11 = u_xlat17 * u_xlat6.x + (-u_xlat17);
					    u_xlat11 = u_xlat11 * u_xlat17 + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;
					    u_xlat6.x = u_xlat6.x * 0.318309873;
					    u_xlat6.x = u_xlat6.x / u_xlat11;
					    u_xlat11 = (-u_xlat10) * u_xlat10 + 1.0;
					    u_xlat2.x = abs(u_xlat16) * u_xlat11 + u_xlat1.x;
					    u_xlat7 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat7 * u_xlat11 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat16);
					    u_xlat1.x = u_xlat7 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat6.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat6.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz + _Color.xyz;
					    u_xlat15 = u_xlat15 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat15 = (-u_xlat15) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb15 = u_xlat15!=0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat15 = (-u_xlat5) + 1.0;
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5 + u_xlat5;
					    u_xlat5 = u_xlat5 * u_xlat15;
					    u_xlat5 = u_xlat5 * u_xlat10 + -0.5;
					    u_xlat10 = (-u_xlat0.x) + 1.0;
					    u_xlat15 = u_xlat10 * u_xlat10;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat15;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = -abs(u_xlat16) + 1.0;
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = log2(u_xlat16);
					    u_xlat16 = u_xlat16 * _Ice_fresnel;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat5 * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat15 = (-u_xlat16) + 1.0;
					    u_xlat15 = _Transparency * u_xlat15 + u_xlat16;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					int u_xlati16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat0.z = sqrt(u_xlat15);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat16 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat16 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat16;
					    u_xlat16 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat16;
					    u_xlat15 = vs_TEXCOORD4.y * u_xlat15 + (-u_xlat16);
					    u_xlat15 = _LocalGlobal * u_xlat15 + u_xlat16;
					    u_xlat15 = u_xlat15 * abs(u_xlat15) + (-u_xlat1.y);
					    u_xlat15 = u_xlat15 * _snow_slider;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = max(u_xlat1.y, 0.0);
					    u_xlat16 = min(u_xlat16, 0.800000012);
					    u_xlat16 = u_xlat16 * _Freezeeffectnormal;
					    u_xlat17 = max(_snow_slider, 0.0);
					    u_xlat17 = min(u_xlat17, 1.20000005);
					    u_xlat17 = u_xlat17 * 0.699999988;
					    u_xlat15 = u_xlat17 * u_xlat15 + u_xlat16;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlati16 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati16].xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10 = (-_Gloss) + 0.699999988;
					    u_xlat10 = u_xlat15 * u_xlat10 + _Gloss;
					    u_xlat10 = (-u_xlat10) + 1.0;
					    u_xlat1.x = u_xlat10 * u_xlat10;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11 = u_xlat17 * u_xlat6.x + (-u_xlat17);
					    u_xlat11 = u_xlat11 * u_xlat17 + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;
					    u_xlat6.x = u_xlat6.x * 0.318309873;
					    u_xlat6.x = u_xlat6.x / u_xlat11;
					    u_xlat11 = (-u_xlat10) * u_xlat10 + 1.0;
					    u_xlat2.x = abs(u_xlat16) * u_xlat11 + u_xlat1.x;
					    u_xlat7 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat7 * u_xlat11 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat16);
					    u_xlat1.x = u_xlat7 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat6.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat6.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz + _Color.xyz;
					    u_xlat15 = u_xlat15 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat15 = (-u_xlat15) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb15 = u_xlat15!=0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat15 = (-u_xlat5) + 1.0;
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5 + u_xlat5;
					    u_xlat5 = u_xlat5 * u_xlat15;
					    u_xlat5 = u_xlat5 * u_xlat10 + -0.5;
					    u_xlat10 = (-u_xlat0.x) + 1.0;
					    u_xlat15 = u_xlat10 * u_xlat10;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat15;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = -abs(u_xlat16) + 1.0;
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = log2(u_xlat16);
					    u_xlat16 = u_xlat16 * _Ice_fresnel;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat5 * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat15 = (-u_xlat16) + 1.0;
					    u_xlat15 = _Transparency * u_xlat15 + u_xlat16;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD8.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat10_4.w * u_xlat1.x;
					    u_xlat7.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat10_4.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD8.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat10_4.w * u_xlat1.x;
					    u_xlat7.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat10_4.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat10_5 = texture(_LightTexture0, vs_TEXCOORD8.xyz);
					    u_xlat16_1 = u_xlat10_4.x * u_xlat10_5.w;
					    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat10_5 = texture(_LightTexture0, vs_TEXCOORD8.xyz);
					    u_xlat16_1 = u_xlat10_4.x * u_xlat10_5.w;
					    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD8.xy);
					    u_xlat1.xyz = u_xlat10_4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD8.xy);
					    u_xlat1.xyz = u_xlat10_4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat0.z = sqrt(u_xlat15);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat16 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat16 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat16;
					    u_xlat16 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat16;
					    u_xlat15 = vs_TEXCOORD4.y * u_xlat15 + (-u_xlat16);
					    u_xlat15 = _LocalGlobal * u_xlat15 + u_xlat16;
					    u_xlat15 = u_xlat15 * abs(u_xlat15) + (-u_xlat1.y);
					    u_xlat15 = u_xlat15 * _snow_slider;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = max(u_xlat1.y, 0.0);
					    u_xlat16 = min(u_xlat16, 0.800000012);
					    u_xlat16 = u_xlat16 * _Freezeeffectnormal;
					    u_xlat17 = max(_snow_slider, 0.0);
					    u_xlat17 = min(u_xlat17, 1.20000005);
					    u_xlat17 = u_xlat17 * 0.699999988;
					    u_xlat15 = u_xlat17 * u_xlat15 + u_xlat16;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10 = (-_Gloss) + 0.699999988;
					    u_xlat10 = u_xlat15 * u_xlat10 + _Gloss;
					    u_xlat10 = (-u_xlat10) + 1.0;
					    u_xlat1.x = u_xlat10 * u_xlat10;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11 = u_xlat17 * u_xlat6.x + (-u_xlat17);
					    u_xlat11 = u_xlat11 * u_xlat17 + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;
					    u_xlat6.x = u_xlat6.x * 0.318309873;
					    u_xlat6.x = u_xlat6.x / u_xlat11;
					    u_xlat11 = (-u_xlat10) * u_xlat10 + 1.0;
					    u_xlat2.x = abs(u_xlat16) * u_xlat11 + u_xlat1.x;
					    u_xlat7 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat7 * u_xlat11 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat16);
					    u_xlat1.x = u_xlat7 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat6.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat6.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz + _Color.xyz;
					    u_xlat15 = u_xlat15 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat15 = (-u_xlat15) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb15 = u_xlat15!=0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat15 = (-u_xlat5) + 1.0;
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5 + u_xlat5;
					    u_xlat5 = u_xlat5 * u_xlat15;
					    u_xlat5 = u_xlat5 * u_xlat10 + -0.5;
					    u_xlat10 = (-u_xlat0.x) + 1.0;
					    u_xlat15 = u_xlat10 * u_xlat10;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat15;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = -abs(u_xlat16) + 1.0;
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = log2(u_xlat16);
					    u_xlat16 = u_xlat16 * _Ice_fresnel;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat5 * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat15 = (-u_xlat16) + 1.0;
					    u_xlat15 = _Transparency * u_xlat15 + u_xlat16;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					int u_xlati16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat0.z = sqrt(u_xlat15);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat16 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat16 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat16;
					    u_xlat16 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat16;
					    u_xlat15 = vs_TEXCOORD4.y * u_xlat15 + (-u_xlat16);
					    u_xlat15 = _LocalGlobal * u_xlat15 + u_xlat16;
					    u_xlat15 = u_xlat15 * abs(u_xlat15) + (-u_xlat1.y);
					    u_xlat15 = u_xlat15 * _snow_slider;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = max(u_xlat1.y, 0.0);
					    u_xlat16 = min(u_xlat16, 0.800000012);
					    u_xlat16 = u_xlat16 * _Freezeeffectnormal;
					    u_xlat17 = max(_snow_slider, 0.0);
					    u_xlat17 = min(u_xlat17, 1.20000005);
					    u_xlat17 = u_xlat17 * 0.699999988;
					    u_xlat15 = u_xlat17 * u_xlat15 + u_xlat16;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlati16 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati16].xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10 = (-_Gloss) + 0.699999988;
					    u_xlat10 = u_xlat15 * u_xlat10 + _Gloss;
					    u_xlat10 = (-u_xlat10) + 1.0;
					    u_xlat1.x = u_xlat10 * u_xlat10;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11 = u_xlat17 * u_xlat6.x + (-u_xlat17);
					    u_xlat11 = u_xlat11 * u_xlat17 + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;
					    u_xlat6.x = u_xlat6.x * 0.318309873;
					    u_xlat6.x = u_xlat6.x / u_xlat11;
					    u_xlat11 = (-u_xlat10) * u_xlat10 + 1.0;
					    u_xlat2.x = abs(u_xlat16) * u_xlat11 + u_xlat1.x;
					    u_xlat7 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat7 * u_xlat11 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat16);
					    u_xlat1.x = u_xlat7 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat6.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat6.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz + _Color.xyz;
					    u_xlat15 = u_xlat15 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat15 = (-u_xlat15) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb15 = u_xlat15!=0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat15 = (-u_xlat5) + 1.0;
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5 + u_xlat5;
					    u_xlat5 = u_xlat5 * u_xlat15;
					    u_xlat5 = u_xlat5 * u_xlat10 + -0.5;
					    u_xlat10 = (-u_xlat0.x) + 1.0;
					    u_xlat15 = u_xlat10 * u_xlat10;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat15;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = -abs(u_xlat16) + 1.0;
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = log2(u_xlat16);
					    u_xlat16 = u_xlat16 * _Ice_fresnel;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat5 * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat15 = (-u_xlat16) + 1.0;
					    u_xlat15 = _Transparency * u_xlat15 + u_xlat16;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD8.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat10_4.w * u_xlat1.x;
					    u_xlat7.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat10_4.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD8.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat10_4.w * u_xlat1.x;
					    u_xlat7.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat10_4.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat10_5 = texture(_LightTexture0, vs_TEXCOORD8.xyz);
					    u_xlat16_1 = u_xlat10_4.x * u_xlat10_5.w;
					    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat10_5 = texture(_LightTexture0, vs_TEXCOORD8.xyz);
					    u_xlat16_1 = u_xlat10_4.x * u_xlat10_5.w;
					    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD8.xy);
					    u_xlat1.xyz = u_xlat10_4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD8.xy);
					    u_xlat1.xyz = u_xlat10_4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat0.z = sqrt(u_xlat15);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat16 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat16 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat16;
					    u_xlat16 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat16;
					    u_xlat15 = vs_TEXCOORD4.y * u_xlat15 + (-u_xlat16);
					    u_xlat15 = _LocalGlobal * u_xlat15 + u_xlat16;
					    u_xlat15 = u_xlat15 * abs(u_xlat15) + (-u_xlat1.y);
					    u_xlat15 = u_xlat15 * _snow_slider;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = max(u_xlat1.y, 0.0);
					    u_xlat16 = min(u_xlat16, 0.800000012);
					    u_xlat16 = u_xlat16 * _Freezeeffectnormal;
					    u_xlat17 = max(_snow_slider, 0.0);
					    u_xlat17 = min(u_xlat17, 1.20000005);
					    u_xlat17 = u_xlat17 * 0.699999988;
					    u_xlat15 = u_xlat17 * u_xlat15 + u_xlat16;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10 = (-_Gloss) + 0.699999988;
					    u_xlat10 = u_xlat15 * u_xlat10 + _Gloss;
					    u_xlat10 = (-u_xlat10) + 1.0;
					    u_xlat1.x = u_xlat10 * u_xlat10;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11 = u_xlat17 * u_xlat6.x + (-u_xlat17);
					    u_xlat11 = u_xlat11 * u_xlat17 + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;
					    u_xlat6.x = u_xlat6.x * 0.318309873;
					    u_xlat6.x = u_xlat6.x / u_xlat11;
					    u_xlat11 = (-u_xlat10) * u_xlat10 + 1.0;
					    u_xlat2.x = abs(u_xlat16) * u_xlat11 + u_xlat1.x;
					    u_xlat7 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat7 * u_xlat11 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat16);
					    u_xlat1.x = u_xlat7 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat6.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat6.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz + _Color.xyz;
					    u_xlat15 = u_xlat15 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat15 = (-u_xlat15) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb15 = u_xlat15!=0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat15 = (-u_xlat5) + 1.0;
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5 + u_xlat5;
					    u_xlat5 = u_xlat5 * u_xlat15;
					    u_xlat5 = u_xlat5 * u_xlat10 + -0.5;
					    u_xlat10 = (-u_xlat0.x) + 1.0;
					    u_xlat15 = u_xlat10 * u_xlat10;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat15;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = -abs(u_xlat16) + 1.0;
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = log2(u_xlat16);
					    u_xlat16 = u_xlat16 * _Ice_fresnel;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat5 * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat15 = (-u_xlat16) + 1.0;
					    u_xlat15 = _Transparency * u_xlat15 + u_xlat16;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					int u_xlati16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat0.z = sqrt(u_xlat15);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat16 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat16 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat16;
					    u_xlat16 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat16;
					    u_xlat15 = vs_TEXCOORD4.y * u_xlat15 + (-u_xlat16);
					    u_xlat15 = _LocalGlobal * u_xlat15 + u_xlat16;
					    u_xlat15 = u_xlat15 * abs(u_xlat15) + (-u_xlat1.y);
					    u_xlat15 = u_xlat15 * _snow_slider;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = max(u_xlat1.y, 0.0);
					    u_xlat16 = min(u_xlat16, 0.800000012);
					    u_xlat16 = u_xlat16 * _Freezeeffectnormal;
					    u_xlat17 = max(_snow_slider, 0.0);
					    u_xlat17 = min(u_xlat17, 1.20000005);
					    u_xlat17 = u_xlat17 * 0.699999988;
					    u_xlat15 = u_xlat17 * u_xlat15 + u_xlat16;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlati16 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati16].xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10 = (-_Gloss) + 0.699999988;
					    u_xlat10 = u_xlat15 * u_xlat10 + _Gloss;
					    u_xlat10 = (-u_xlat10) + 1.0;
					    u_xlat1.x = u_xlat10 * u_xlat10;
					    u_xlat6.x = u_xlat1.x * u_xlat1.x;
					    u_xlat11 = u_xlat17 * u_xlat6.x + (-u_xlat17);
					    u_xlat11 = u_xlat11 * u_xlat17 + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;
					    u_xlat6.x = u_xlat6.x * 0.318309873;
					    u_xlat6.x = u_xlat6.x / u_xlat11;
					    u_xlat11 = (-u_xlat10) * u_xlat10 + 1.0;
					    u_xlat2.x = abs(u_xlat16) * u_xlat11 + u_xlat1.x;
					    u_xlat7 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat7 * u_xlat11 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat16);
					    u_xlat1.x = u_xlat7 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat6.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat6.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz + _Color.xyz;
					    u_xlat15 = u_xlat15 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat15 = (-u_xlat15) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb15 = u_xlat15!=0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat15 = (-u_xlat5) + 1.0;
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat15 = u_xlat5 + u_xlat5;
					    u_xlat5 = u_xlat5 * u_xlat15;
					    u_xlat5 = u_xlat5 * u_xlat10 + -0.5;
					    u_xlat10 = (-u_xlat0.x) + 1.0;
					    u_xlat15 = u_xlat10 * u_xlat10;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat10 = u_xlat10 * u_xlat15;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = -abs(u_xlat16) + 1.0;
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = log2(u_xlat16);
					    u_xlat16 = u_xlat16 * _Ice_fresnel;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat17 = u_xlat15 * u_xlat15;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat15 = u_xlat15 * u_xlat17;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat5 * u_xlat10;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat15 = (-u_xlat16) + 1.0;
					    u_xlat15 = _Transparency * u_xlat15 + u_xlat16;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD8.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat10_4.w * u_xlat1.x;
					    u_xlat7.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat10_4.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat10_4 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD8.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat10_4.w * u_xlat1.x;
					    u_xlat7.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat10_4.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat10_5 = texture(_LightTexture0, vs_TEXCOORD8.xyz);
					    u_xlat16_1 = u_xlat10_4.x * u_xlat10_5.w;
					    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
					    u_xlat10_4 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat10_5 = texture(_LightTexture0, vs_TEXCOORD8.xyz);
					    u_xlat16_1 = u_xlat10_4.x * u_xlat10_5.w;
					    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD8.xy);
					    u_xlat1.xyz = u_xlat10_4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						vec4 _NormalMapII_ST;
						float _Freezeeffectnormal;
						float _LocalGlobal;
						float _Transparency;
						float _Ice_fresnel;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _NormalMapII;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _snow;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					int u_xlati19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _NormalMapII_ST.xy + _NormalMapII_ST.zw;
					    u_xlat0 = texture(_NormalMapII, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat19 = u_xlat2.y * unity_WorldToObject[1].y;
					    u_xlat19 = unity_WorldToObject[0].y * u_xlat2.x + u_xlat19;
					    u_xlat19 = unity_WorldToObject[2].y * u_xlat2.z + u_xlat19;
					    u_xlat18 = vs_TEXCOORD4.y * u_xlat18 + (-u_xlat19);
					    u_xlat18 = _LocalGlobal * u_xlat18 + u_xlat19;
					    u_xlat18 = u_xlat18 * abs(u_xlat18) + (-u_xlat1.y);
					    u_xlat18 = u_xlat18 * _snow_slider;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = max(u_xlat1.y, 0.0);
					    u_xlat19 = min(u_xlat19, 0.800000012);
					    u_xlat19 = u_xlat19 * _Freezeeffectnormal;
					    u_xlat20 = max(_snow_slider, 0.0);
					    u_xlat20 = min(u_xlat20, 1.20000005);
					    u_xlat20 = u_xlat20 * 0.699999988;
					    u_xlat18 = u_xlat20 * u_xlat18 + u_xlat19;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zzz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlati19 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati19].xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat20 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat12 = (-_Gloss) + 0.699999988;
					    u_xlat12 = u_xlat18 * u_xlat12 + _Gloss;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat12;
					    u_xlat7.x = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat20 * u_xlat7.x + (-u_xlat20);
					    u_xlat13 = u_xlat13 * u_xlat20 + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
					    u_xlat7.x = u_xlat7.x * 0.318309873;
					    u_xlat7.x = u_xlat7.x / u_xlat13;
					    u_xlat13 = (-u_xlat12) * u_xlat12 + 1.0;
					    u_xlat2.x = abs(u_xlat19) * u_xlat13 + u_xlat1.x;
					    u_xlat8 = min(u_xlat0.x, 1.0);
					    u_xlat1.x = u_xlat8 * u_xlat13 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * abs(u_xlat19);
					    u_xlat1.x = u_xlat8 * u_xlat2.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
					    u_xlat1.x = 0.5 / u_xlat1.x;
					    u_xlat1.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = u_xlat8 * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 3.14159274;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_2 = texture(_snow, u_xlat7.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz + (-_Color.xyz);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + _Color.xyz;
					    u_xlat18 = u_xlat18 * (-_Metallic) + _Metallic;
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat18 = (-u_xlat18) * 0.959999979 + 0.959999979;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD8.xy);
					    u_xlat1.xyz = u_xlat10_4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat6) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat6 + u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat18;
					    u_xlat6 = u_xlat6 * u_xlat12 + -0.5;
					    u_xlat12 = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat19 = log2(u_xlat19);
					    u_xlat19 = u_xlat19 * _Ice_fresnel;
					    u_xlat19 = exp2(u_xlat19);
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat18 = _Transparency * u_xlat18 + u_xlat19;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "META"
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
			Cull Off
			GpuProgramID 133148
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_4_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1) / 4][(u_xlati1 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1 / 4][u_xlati1 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2) / 4][(u_xlati1 + 2) % 4] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3) / 4][(u_xlati1 + 3) % 4] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_4_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1) / 4][(u_xlati1 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1 / 4][u_xlati1 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2) / 4][(u_xlati1 + 2) % 4] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3) / 4][(u_xlati1 + 3) % 4] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_4_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1) / 4][(u_xlati1 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1 / 4][u_xlati1 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2) / 4][(u_xlati1 + 2) % 4] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3) / 4][(u_xlati1 + 3) % 4] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_4_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1) / 4][(u_xlati1 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1 / 4][u_xlati1 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2) / 4][(u_xlati1 + 2) % 4] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3) / 4][(u_xlati1 + 3) % 4] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_4_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1) / 4][(u_xlati1 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1 / 4][u_xlati1 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2) / 4][(u_xlati1 + 2) % 4] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3) / 4][(u_xlati1 + 3) % 4] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_4_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1) / 4][(u_xlati1 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1 / 4][u_xlati1 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2) / 4][(u_xlati1 + 2) % 4] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3) / 4][(u_xlati1 + 3) % 4] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "UNITY_SINGLE_PASS_STEREO" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 _Color;
						vec4 _BumpMap_ST;
						float _Metallic;
						float _Gloss;
						vec4 _snow_ST;
						float _snow_slider;
						float _Freezeeffectnormal;
						float _LocalGlobal;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _snow;
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat16_3;
					float u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat6 = u_xlat3.y * unity_WorldToObject[1].y;
					    u_xlat3.x = unity_WorldToObject[0].y * u_xlat3.x + u_xlat6;
					    u_xlat3.x = unity_WorldToObject[2].y * u_xlat3.z + u_xlat3.x;
					    u_xlat0.x = vs_TEXCOORD4.y * u_xlat0.x + (-u_xlat3.x);
					    u_xlat0.x = _LocalGlobal * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat10_1 = texture(_BumpMap, u_xlat3.xy);
					    u_xlat16_3 = u_xlat10_1.y * 2.0 + -1.0;
					    u_xlat0.x = u_xlat0.x * abs(u_xlat0.x) + (-u_xlat16_3);
					    u_xlat16_3 = max(u_xlat16_3, 0.0);
					    u_xlat16_3 = min(u_xlat16_3, 0.800000012);
					    u_xlat3.x = u_xlat16_3 * _Freezeeffectnormal;
					    u_xlat0.x = u_xlat0.x * _snow_slider;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(_snow_slider, 0.0);
					    u_xlat6 = min(u_xlat6, 1.20000005);
					    u_xlat6 = u_xlat6 * 0.699999988;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat3.x;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _snow_ST.xy + _snow_ST.zw;
					    u_xlat10_1 = texture(_snow, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat10_1.xyz + (-_Color.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat3.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat10 = u_xlat0.x * (-_Metallic) + _Metallic;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat10 = (-u_xlat10) * 0.959999979 + 0.959999979;
					    u_xlat2 = (-_Gloss) + 0.699999988;
					    u_xlat0.x = u_xlat0.x * u_xlat2 + _Gloss;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    return;
					}"
				}
			}
		}
	}
	Fallback "Diffuse"
	CustomEditor "ShaderForgeMaterialInspector"
}